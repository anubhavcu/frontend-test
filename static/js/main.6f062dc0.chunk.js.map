{"version":3,"sources":["dist/components/Header.jsx","dist/components/Search.jsx","dist/components/contents/Tile.jsx","dist/components/contents/Content.jsx","dist/components/Category.jsx","dist/pages/Home.jsx","App.js","dist/pages/Details.jsx","serviceWorker.js","index.js"],"names":["Header","className","href","Component","Search","style","backgroundColor","opacity","marginBottom","border","action","type","placeholder","Tile","tileTextBackgroundColor","state","name","imageUrl","key","genRandomTime","Math","floor","random","genRandomBackgroundColor","genRandomTextColor","changeHeartImage","alert","this","props","image","id","color","marginLeft","marginTop","display","marginRight","activeClassName","to","Content","error","errorValue","isLoading","dataToDisplay","actualData","URL","handleErrors","res","ok","Error","getTilesData","fetch","then","json","data","setState","console","log","catch","err","map","entry","Idx","description","category","label","price","Category","Home","title","App","Details","Boolean","window","location","hostname","match","routing","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.6f062dc0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class Header extends Component {\n    render() {\n        return (\n            <section className=\" text-center header\">\n                <div className=\"container\">\n                    <nav className=\"navbar navbar-dark \">\n                        <a className=\"navbar-brand\" href=\".\">\n                            <strong className=\"text-dark\"> Recipies.com</strong>\n                        </a>\n                        <div>\n                            {/* <button className=\"btn btn-light btn-sm\">Login</button> */}\n                            <a href=\"#\" className=\"badge badge-primary m-2\">\n                                Log in\n                            </a>\n                            <a href=\"#\">\n                                <button className=\"btn btn-dark btn-sm\">\n                                    Start Your Free Trial\n                                </button>\n                            </a>\n                        </div>\n                    </nav>\n                </div>\n            </section>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport \"./search.css\";\n\nexport default class Search extends Component {\n    render() {\n        return (\n            <div\n                className=\"container\"\n                style={{\n                    backgroundColor: \"ghostwhite\",\n                    opacity: \"0.5\",\n                    marginBottom: \"25px\",\n                    border: \"ghostwhite\"\n                }}\n            >\n                <form\n                    action=\"\"\n                    className=\"form-inline d-flex justify-content md-form form-sm  mt-2\"\n                >\n                    <div className=\"searchImage\"></div>\n                    <input\n                        className=\"form-control form-control-sm ml-3 w-75\"\n                        type=\"text\"\n                        placeholder=\"Search your favourite recipe... \"\n                    />\n                </form>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { Route, NavLink, HashRouter as Router, Switch } from \"react-router-dom\";\nimport \"./tile.css\";\n\nexport default class Tile extends Component {\n    tileTextBackgroundColor = \"\";\n    state = {\n        name: \"\",\n        imageUrl: \"\",\n        key: \"\"\n    };\n    genRandomTime = () => {\n        return Math.floor(Math.random() * (110 - 15 + 1)) + 15;\n    };\n    genRandomBackgroundColor = () => {\n        if (this.state.key % 2 == 0) {\n            // this.tileTextBackgroundColor = \"white\";\n            return \"white\";\n        } else {\n            // this.tileTextBackgroundColor = \"lightgray\";\n            return \"darkgrey\";\n        }\n    };\n    genRandomTextColor = () => {\n        if (this.state.key % 2 == 0) {\n            return \"black\";\n        } else {\n            return \"white\";\n        }\n    };\n    changeHeartImage = () => {\n        // target = document.getElementsByClassName(\"heartImage\");\n        alert(\"heartImage clicked\");\n    };\n    // displayButtons = () => {\n    //     alert(\"button\");\n    // };\n    render() {\n        this.state.name = this.props.name;\n        this.state.imageUrl = this.props.image;\n        this.state.key = this.props.id;\n        return (\n            <div className=\"tile\">\n                <div\n                    className=\"card\"\n                    style={{\n                        backgroundColor: this.genRandomBackgroundColor()\n                        // backgroundImage:\n                        //     \"linear-gradient(this.genRandomBackgroundColor(), this.genRandomBackgroundColor())\"\n                    }}\n                >\n                    <a href=\"javascript:void(0)\">\n                        <img\n                            id={`tileImage-${this.key}`}\n                            className=\"tileImage\"\n                            className=\"card-img-top\"\n                            src={this.state.imageUrl}\n                        ></img>\n                    </a>\n                    <p\n                        className=\"card-text \"\n                        style={{\n                            color: this.genRandomTextColor(),\n                            marginLeft: \"10px\",\n                            marginTop: \"10px\"\n                        }}\n                    >\n                        <div className=\"heartImage\"></div>{\" \"}\n                        <strong>{this.state.name}</strong> <br />\n                        <div style={{ display: \"flex\" }}>\n                            <div className=\"timeImage\"></div>\n                            <small> {this.genRandomTime()} mins</small>\n                        </div>\n                        <p style={{ marginRight: \"10px\" }}>\n                            Dolor repudiandae doloribus nobis iste quod\n                            voluptate? Consectetur{\" \"}\n                        </p>\n                    </p>\n                    <NavLink\n                        activeClassName=\"active\"\n                        to=\"/:`${this.state.key}`\"\n                    >\n                        <button className=\"viewMore\">View More</button>\n                    </NavLink>\n                    <button className=\"quickView \">Quick View</button>\n                    <span className=\"overlay\"></span>\n                </div>{\" \"}\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport Tile from \"./Tile\";\n// import {\n//     act\n// } from \"@testing-library/react\";\n\nexport default class Content extends Component {\n    state = {\n        error: false,\n        errorValue: \"\",\n        isLoading: false,\n        dataToDisplay: []\n    };\n    actualData = [];\n    URL = \"http://starlord.hackerearth.com/recipe\";\n    componentDidMount() {\n        this.setState({\n            isLoading: true\n        });\n        this.getTilesData();\n    }\n    handleErrors = res => {\n        if (!res.ok) throw new Error(res.error);\n\n        return res;\n    };\n\n    getTilesData = () => {\n        fetch(this.URL)\n            .then(this.handleErrors)\n            .then(res => res.json())\n            .then(data => {\n                this.setState({\n                    isLoading: false\n                });\n                this.actualData = data;\n                this.setState({\n                    dataToDisplay: this.actualData\n                });\n                console.log(this.state.dataToDisplay);\n            })\n\n            .catch(err =>\n                this.setState({\n                    error: true,\n                    errorValue: this.state.errorValue + err\n                })\n            );\n    };\n\n    render() {\n        const { dataToDisplay } = this.state;\n        const { error, isLoading } = this.state;\n        if (!error) {\n            if (!isLoading) {\n                return (\n                    <div className=\"container \">\n                        <div className=\"container tileContainer  \">\n                            {dataToDisplay.map((entry, Idx) => {\n                                {\n                                    const {\n                                        description,\n                                        category,\n                                        id,\n                                        image,\n                                        label,\n                                        name,\n                                        price\n                                    } = entry;\n\n                                    return (\n                                        <Tile\n                                            description={description}\n                                            category={category}\n                                            id={id}\n                                            image={image}\n                                            label={label}\n                                            price={price}\n                                            name={name}\n                                            key={Idx}\n                                        ></Tile>\n                                    );\n                                }\n                            })}\n                        </div>\n                    </div>\n                );\n            } else {\n                return (\n                    <div className=\"container\">\n                        {\" \"}\n                        <h4> Loading ... </h4>{\" \"}\n                    </div>\n                );\n            }\n        } else {\n            return (\n                <div className=\"container\">\n                    {\" \"}\n                    {/* <h1>Something went wrong ...{this.state.errorValue} </h1> */}\n                    <h4>Oops.Something went wrong .. </h4>\n                </div>\n            );\n        }\n    }\n}\n","import React, { Component } from \"react\";\n\nexport default class Category extends Component {\n    state = {\n        category: \"\"\n    };\n    render() {\n        // this.state.category = this.props.category;\n\n        return (\n            <section className=\"text-center titlebar\">\n                <div className=\"container\">\n                    <nav className=\"navbar navbar-dark \">\n                        <a className=\"text-dark\">\n                            Category <strong>{this.props.category}</strong>\n                        </a>\n                    </nav>\n                </div>\n            </section>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport Header from \"../components/Header\";\nimport Search from \"../components/Search\";\nimport Content from \"../components/contents/Content\";\nimport Category from \"../components/Category\";\nimport \"./home.css\";\nexport default class Home extends Component {\n    state = {\n        title: \"Tiles\",\n        category: \"All\"\n    };\n    render() {\n        return (\n            <div>\n                <Header />\n                <Search />\n                <Category category={this.state.category} />\n                <Content />\n            </div>\n        );\n    }\n}\n","import React, {\n    Component\n} from \"react\";\nimport Home from \"./dist/pages/Home\";\nimport \"./App.css\";\n\nexport default class App extends Component {\n    render() {\n        return (\n            <div className=\"bg\">\n              <div >\n                <Home />\n              </div>\n\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\n\nexport default class Details extends Component {\n    render() {\n        return <h1>details page</h1>;\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Details from \"./dist/pages/Details\";\nimport { Route, NavLink, HashRouter as Router, Switch } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\n// ReactDOM.render(\n//     <React.StrictMode>\n//         <App />\n//     </React.StrictMode>,\n//     document.getElementById(\"root\")\n// );\nconst routing = (\n    <Router>\n        <div>\n            <Switch>\n                <Route exact path=\"/\" component={App} />\n                <Route exact path=\"/:id\" component={Details} />\n            </Switch>\n        </div>\n    </Router>\n);\nReactDOM.render(routing, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}